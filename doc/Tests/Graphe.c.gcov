        -:    0:Source:../src/source/Graphe.c
        -:    0:Graph:../src/source/Graphe.gcno
        -:    0:Data:../src/source/Graphe.gcda
        -:    0:Runs:6
        -:    0:Programs:1
        -:    1:/*
        -:    2: _____ _                 _         __  __ 
        -:    3:|  ___| | __ _ _ __  ___| |_ __ _ / _|/ _|
        -:    4:| |_  | |/ _` | '_ \/ __| __/ _` | |_| |_ 
        -:    5:|  _| | | (_| | |_) \__ \ || (_| |  _|  _|
        -:    6:|_|   |_|\__,_| .__/|___/\__\__,_|_| |_|  
        -:    7:              |_|                         
        -:    8:Flapstaff is a Light And Powerful Social Text Analyser For Facebook
        -:    9:
        -:   10:Coders:
        -:   11:benjamin.crespo.ballester(at)gmail(dot)com
        -:   12:yann.pravo(at)gmail(dot)com
        -:   13:mathieu.triay(at)gmail(dot)com
        -:   14:
        -:   15:Repo: http://bitbucket.org/nagy/flapstaff/
        -:   16:*/
        -:   17:
        -:   18:#include "../headers/TPersonne.h"
        -:   19:#include "../headers/Graphe.h"
        -:   20:
        -:   21:/*
        -:   22:*	Créé une matrice vide de la taille passé en paramètre
        -:   23:*	Toutes les cases sont initialisées à 0
        -:   24:*
        -:   25:*	@param sizeMatrix, taille de la matrice
        -:   26:*	@param une matrice d'entier initialisé à 0 de la taille donnée
        -:   27:*/
        -:   28:int** initMatrix(int sizeMatrix)
       13:   29:{
        -:   30:	int** matrixEmpty;
       13:   31:	matrixEmpty = (int**) malloc(sizeMatrix * sizeof (int*));
        -:   32:	
        -:   33:	int i;
       84:   34:	for (i = 0; i < sizeMatrix; i++)
        -:   35:	{
       71:   36:		matrixEmpty[i] = (int*) malloc(sizeMatrix * sizeof (int));
        -:   37:	}
        -:   38:	
        -:   39:	int j;
       84:   40:	for (i = 0; i < sizeMatrix; i++)
        -:   41:	{
      474:   42:		for (j = 0; j < sizeMatrix; j++)
        -:   43:		{
      403:   44:				matrixEmpty[i][j] = 0;
        -:   45:		}
        -:   46:	}
        -:   47:	
       13:   48:	return matrixEmpty;
        -:   49:}
        -:   50:
        -:   51:/*
        -:   52:*	Créé une matrice remplie avec les informations passées en paramètre
        -:   53:*
        -:   54:*	@param relation, liste des relations à placer dans la matrice
        -:   55:*	@param nbPersonnes, nombre de personne (taille) de la matrice
        -:   56:*	@param tab, liste des personnes correspondant à la matrice
        -:   57:*	@param nbRelation, nombre de relation contenues dans relation
        -:   58:*	@return, une matrice d'entier complétée avec les infos en param
        -:   59:*/
        -:   60:int** createMatrix(struct relationship *relation, int nbPersonnes, struct Personne *tab, int nbRelation)
       11:   61:{
        -:   62:	int **matrix;
        -:   63:	int i, j, k;
        -:   64:	
       11:   65:	matrix = initMatrix(nbPersonnes);
        -:   66:	
       87:   67:	for(i = 0; i < nbRelation; i++)
        -:   68:	{
       76:   69:		j = position(relation[i].id1, tab);
       76:   70:		k = position(relation[i].id2, tab);
       76:   71:		addRelation(j, k, matrix);
        -:   72:	}
        -:   73:	
       11:   74:	return matrix;
        -:   75:}
        -:   76:
        -:   77:/*
        -:   78:*	Affiche la matrice passée en paramètre
        -:   79:*
        -:   80:*	@param matrix, la matrice à afficher
        -:   81:*	@param size, taille de la matrice à afficher	
        -:   82:*/
        -:   83:void printMatrix(int **matrix, int size)
        1:   84:{
        -:   85:	int i, j;
        6:   86:	for (i = 0; i < size; i++)
        -:   87:	{
       30:   88:		for (j = 0; j < size; j++)
        -:   89:		{
       25:   90:			printf(" %d ", matrix[i][j]);
        -:   91:		}
        5:   92:		printf("\n");
        -:   93:	}
        -:   94:}
        -:   95:
        -:   96:/*
        -:   97:*	Ajoute une relation entre 2 ID donnés dans la matrice donnée
        -:   98:*	Une relation effective vaut 1, une non existante vaut 0
        -:   99:*	i et j doivent exister dans matrix !!!
        -:  100:*
        -:  101:*	@param i, place de id1 dans le tableau
        -:  102:*	@param j, place de id2 dans le tableau
        -:  103:*	@param matrix, matrice à remplir, elle est modifiée directement
        -:  104:*		=> Attention aux effets de bord !
        -:  105:*/
        -:  106:void addRelation(int i, int j, int **matrix)
       77:  107:{
       77:  108:	matrix[i][j] = 1;
        -:  109:}
        -:  110:
        -:  111:/*
        -:  112:*	Calcul les composantes fortement connexes sur la matrice donnée
        -:  113:*	a.k.a compCon (pour les intimes). Fred, si tu me lis.
        -:  114:*
        -:  115:*	@param matrix, matrice de boolean materialisant les relations entre personnes
        -:  116:*	@param size, taille de la matrice donnée
        -:  117:*	@return	une liste de composantes connexes (suite de positions dans le graphe).
        -:  118:*		Chaque composante et la fin de la liste sont terminées par -1.
        -:  119:*/
        -:  120:int** getStronglyConnectedComponents(int **matrix, int size)
        7:  121:{
        7:  122:	int *etat = malloc(size * sizeof(int));
        -:  123:	int *tag;
        -:  124:	int *tagDual;
        7:  125:	int **compos = malloc(sizeof(int*));
        -:  126:	
        -:  127:	int i, j;
        7:  128:	int k = 0; // gere le nombre de lignes de la matrice compos
        7:  129:	int l = 0; // gere le nombre de colonnes d'une ligne de la matrice compos
        -:  130:	
       48:  131:	for (i = 0; i < size; i++)
        -:  132:	{
       41:  133:		etat[i] = 0;
        -:  134:	}
        -:  135: 	
       48:  136:	for (i = 0; i < size; i++)
        -:  137:	{
       41:  138:		if (etat[i] == 0)
        -:  139:		{
       23:  140:			compos = realloc(compos, (k + 1) * sizeof(int*));
       23:  141:			compos[k] = malloc(sizeof(int));
       23:  142:			compos[k][l] = i;
       23:  143:			tag = depthTraversal(matrix, i, size, 1, -1);
       23:  144:			tagDual = depthTraversal(matrix, i, size, 0, -1);
       23:  145:			etat[i] = 1;
        -:  146:			
      162:  147:			for (j = 0; j < size; j++)
        -:  148:			{
      139:  149:				if (tag[j] == 1 && tagDual[j] == 1 && etat[j] == 0)
        -:  150:				{
       18:  151:					l++;					
       18:  152:					compos[k] = realloc(compos[k], (l + 1) * sizeof(int));
       18:  153:					compos[k][l] = j;
        -:  154:					
       18:  155:					etat[j] = 1;
        -:  156:				}
        -:  157:			}
        -:  158:
       23:  159:			l++;					
       23:  160:			compos[k] = realloc(compos[k], (l + 1) * sizeof(int));
       23:  161:			compos[k][l] = -1;
        -:  162:			
       23:  163:			l = 0;
        -:  164:
       23:  165:			k++;
        -:  166:		}
        -:  167:	}
        -:  168:
        7:  169:	compos = realloc(compos, (k + 1) * sizeof(int *));
        7:  170:	compos[k] = malloc(sizeof(int));
        7:  171:	compos[k][l] = -1;
        -:  172:
        7:  173:	free(tag);
        7:  174:	free(tagDual);
        7:  175:	free(etat);
        -:  176:
        7:  177:	return compos;
        -:  178:}
        -:  179:
        -:  180:/*
        -:  181:*	Partie du parcours en prodondeur
        -:  182:*	Est utilisée par depthTraversal.
        -:  183:*
        -:  184:*	@param matrix, matrice de boolean materialisant les relations
        -:  185:*	@param peak, point de départ du parcours
        -:  186:*	@param size, taille de la matrice
        -:  187:*	@param tag, liste des points taggés
        -:  188:*	@param order, 1 pour le sens normal, et 0 pour le dual
        -:  189:*	@param ignored, si il est différent de -1, il indique un point à
        -:  190:*	       ignorer lors du parcours, sinon ce sera un parcours complet
        -:  191:*/
        -:  192:void depthTraversalRec(int **matrix, int peak, int size, int *tag, int order, int ignored)
      254:  193:{
        -:  194:	int i;
      254:  195:	tag[peak] = 1;
        -:  196:		
     1956:  197:	for (i = 0; i < size; i++)
        -:  198:	{
     1702:  199:		if ((ignored != -1 && i != ignored) || ignored == -1)
        -:  200:		{
     1615:  201:			if (order == 1)
        -:  202:			{
      881:  203:				if (matrix[peak][i] == 1 && tag[i] == 0)
        -:  204:				{
       92:  205:					depthTraversalRec(matrix, i, size, tag, order, ignored);
        -:  206:
        -:  207:				}
        -:  208:			}
        -:  209:			else
        -:  210:			{
      734:  211:				if (matrix[i][peak] == 1 && tag[i] == 0)
        -:  212:				{
        -:  213:
       76:  214:					 depthTraversalRec(matrix, i, size, tag, order, ignored);
        -:  215:
        -:  216:				}
        -:  217:			}
        -:  218:		}
        -:  219:	}
        -:  220:}
        -:  221:
        -:  222:/*
        -:  223:*	Parcours en profondeur de la matrice à partir d'un point donné.
        -:  224:*	
        -:  225:*	@param matrix, matrice de boolean materialisant les relations
        -:  226:*	@param peak, point de départ du parcours en profondeur
        -:  227:*	@param size, taille de la matrice
        -:  228:*	@param order, 1 pour le sens normal, et 0 pour le dual
        -:  229:*	@param ignored, si il est différent de -1, il indique un point à 
        -:  230:*	       ignorer lors du parcours, sinon ce sera un parcours complet
        -:  231:*	@return liste des sommets du parcours
        -:  232:*/
        -:  233:int* depthTraversal(int **matrix, int peak, int size, int order, int ignored)
       86:  234:{
        -:  235:	int i;
       86:  236:	int *tag = malloc(size * sizeof(int));
        -:  237:	
      642:  238:	for (i = 0; i < size; i++)
        -:  239:	{
      556:  240:		tag[i] = 0;
        -:  241:	}
        -:  242:	
       86:  243:	depthTraversalRec(matrix, peak, size, tag, order, ignored);
        -:  244:	
       86:  245:	return tag;
        -:  246:}
        -:  247:
        -:  248:/*
        -:  249:*	Retourne l'indice d'un tableau (initialisé à -1) 
        -:  250:*	où se trouve le plus petit élément
        -:  251:*
        -:  252:*	@param tab, un tableau d'entier initialisé à -1 
        -:  253:*		    (on ne tient pas compte de cette valeur
        -:  254:*	@param size, la taille du tableau
        -:  255:*	@return, l'indice du tableau où est le minimum
        -:  256:*/
        -:  257:int getMinimum(int *tab, int size)
       23:  258:{
       23:  259:	int i = 0;
        -:  260:	int min;
        -:  261:	
       84:  262:	while (tab[i] == -1 || tab[i] == -2)
        -:  263:	{
       38:  264:		i++;
        -:  265:	}
        -:  266:	
       23:  267:	min = i;
        -:  268:	
      101:  269:	for (i = min + 1; i < size; i++)
        -:  270:	{
       78:  271:		if (tab[i] != -1 && tab[i] != -2 && tab[i] < tab[min])
        -:  272:		{
        8:  273:			min = i;
        -:  274:		}
        -:  275:	}
        -:  276:
       23:  277:	return min;
        -:  278:}
        -:  279:
        -:  280:/*
        -:  281:*	Retourne un tableau contenant le chemin le plus court
        -:  282:*	pour chaque question du graphe donné
        -:  283:*	Les chemins sont donnés sous forme de suite d'indices du graphe
        -:  284:*
        -:  285:*	@param g, Graphe contenant les questions
        -:  286:*	@return un tableau de liste de int
        -:  287:*/
        -:  288:int** getQuestionsAnswers(struct Graph g)
        4:  289:{
        4:  290:	int **questionsAnswers = malloc((g.nbQuestions + 1) * sizeof(int*));
        -:  291:	int i;
        -:  292:	
       12:  293:	for(i = 0; i < g.nbQuestions; ++i)
        -:  294:	{	
        8:  295:		questionsAnswers[i] = getShortestRoute(g, position(g.questions[i].id1, g.tabPersonnes), 
        -:  296:					     		  position(g.questions[i].id2, g.tabPersonnes));
        -:  297:	}
        -:  298:	
        4:  299:	return questionsAnswers;
        -:  300:}
        -:  301:
        -:  302:/*
        -:  303:*	Calcul le chemin le plus court entre 2 points donné
        -:  304:*	dans le Graphe donné. Algo de Dijkstra.
        -:  305:*	
        -:  306:*	@param g, graphe contenant toutes les infos necessaires
        -:  307:*	@param peakA, point de départ, position dans le graphe (pas ID)
        -:  308:*	@param peakB, point d'arrivée, position dans le graphe (pas ID)
        -:  309:*	@return tableau avec la liste des positions dans le graphe, 
        -:  310:*		dans l'odre inverse. Ex: peakB..peakN..peakN-1..PeakA
        -:  311:*		On retourne -2 directement si pas de chemin
        -:  312:*/
        -:  313:int* getShortestRoute(struct Graph g, int peakA, int peakB)
        8:  314:{	
        8:  315:	int *route = malloc(1 * sizeof(int));
        8:  316:	int *routePeakA = depthTraversal(g.matrix, peakA, g.nbPersonnes, 1, -1);
        -:  317:	
        8:  318:	if (routePeakA[peakB] == 0)
        -:  319:	{
        -:  320:		/* Le point n'est pas dans le parcours, il n'y a pas de chemin */
        4:  321:		route[0] = -2;
        -:  322:	}
        -:  323:	else
        -:  324:	{
        -:  325:		int i;
        -:  326:		int n1,n2;
        4:  327:		int size = g.nbPersonnes;	
        4:  328:		int *explored = malloc(size * sizeof(int));
        4:  329:		int *father = malloc(size * sizeof (int));
        4:  330:		int *notSeen = malloc(size * sizeof(int));
        4:  331:		int j = 0;
        -:  332:
       27:  333:		for (i = 0; i < size; i++)
        -:  334:		{
       23:  335:			explored[i] = 20000; /* Dummy number */
       23:  336:			father[i] = 0;
        -:  337:		}
        -:  338:
        4:  339:		explored[peakA] = 0;
        -:  340:
       27:  341:		for (i = 0; i < size; i++)
        -:  342:		{
       23:  343:			notSeen[i] = explored[i];
        -:  344:		}
        -:  345:
       27:  346:		while (stillNotSeen(notSeen, size) == 0)
        -:  347:		{
       23:  348:			n1 = getMinimum(notSeen, size) ;
       23:  349:			notSeen[n1] = -1;
        -:  350:
      162:  351:			for (n2 = 0; n2 < size; n2++)
        -:  352:			{
      139:  353:				if (g.matrix[n1][n2] == 1)
        -:  354:				{
        -:  355:
       29:  356:					if (explored[n2] > explored[n1] + g.tabPersonnes[n1].freq + g.tabPersonnes[n2].freq)
        -:  357:		 			{
        4:  358:						explored[n2] = explored[n1] + g.tabPersonnes[n1].freq 
        -:  359:									    + g.tabPersonnes[n2].freq;
        4:  360:						father[n2] = n1;
        -:  361:					}
        -:  362:				}
        -:  363:			}
        -:  364:
      162:  365:			for (i = 0; i < size; i++)
        -:  366:			{
      139:  367:				if (notSeen[i] != -1)
        -:  368:				{
       58:  369:					notSeen[i] = explored[i];
        -:  370:				}
        -:  371:			}
        -:  372:		}
        -:  373:
        4:  374:		i = peakB;
        -:  375:
       12:  376:		while (i != peakA)
        -:  377:		{
        4:  378:			route = realloc(route, (j + 1) * sizeof(int));
        4:  379:			route[j] = i;
        4:  380:			i = father[i];
        4:  381:			j++;
        -:  382:		}
        -:  383:
        4:  384:		route = realloc(route, (j + 2) * sizeof(int));
        4:  385:		route[j] = peakA;
        4:  386:		route[j + 1] = -1;
        -:  387:
        4:  388:		free(explored);
        4:  389:		free(father);
        4:  390:		free(notSeen);	
        -:  391:	}
        -:  392:	
        8:  393:	free(routePeakA);
        -:  394:	
        8:  395:	return route;
        -:  396:}
        -:  397:
        -:  398:/*
        -:  399:*	Trouve si il reste des sommets encore inexplorés
        -:  400:*	
        -:  401:*	@param notSeen, tableau des points non explorés
        -:  402:*	@param size, taille de notSeen
        -:  403:*	@return 0 si il reste des points, 1 sinon
        -:  404:*/
        -:  405:int stillNotSeen(int *notSeen, int size)
       27:  406:{
       27:  407:	int result = 1;
        -:  408:	int i;
        -:  409:	
      111:  410:	for(i = 0; i < size && result != 0; i++)
        -:  411:	{
       84:  412:		if (notSeen[i] != -1 )
        -:  413:		{
       23:  414:			result = 0;
        -:  415:		}
        -:  416:	}
        -:  417:	
       27:  418:	return result;
        -:  419:}
        -:  420:
        -:  421:/*
        -:  422:*	Retourne une "matrice" contenant pour chaque composante connexe
        -:  423:*	les indices des personnes importantes correspondantes, -1 s'il n'y en a pas
        -:  424:*
        -:  425:*	@ param components, la "matrice" des composantes connexes
        -:  426:*	@ param g, la structure de graphe
        -:  427:*	@ return tabImportant, la matrice des personnes importantes
        -:  428:*/
        -:  429:int** getAllImportantPersons(int **components, struct Graph g)
        3:  430:{
        3:  431:	int **tabImportant = malloc(sizeof(int*));
        3:  432:	int i = 0;
        3:  433:	int k = 0;	
        3:  434:	int j = 0;
        -:  435:	
       17:  436:	while (components[i][0] != -1)
        -:  437:	{
       32:  438:		while (components[i][j] != -1)
        -:  439:		{
       21:  440:			j++;
        -:  441:		}
        -:  442:
       11:  443:		tabImportant[k] = malloc((j + 1) * sizeof(int));
       11:  444:		j = 0;		
       11:  445:		tabImportant[k] = getImportantPerson(components[i], g);
       11:  446:		k++;
       11:  447:		tabImportant = realloc(tabImportant, (k + 1) * sizeof(int*));
       11:  448:		i++;
        -:  449:	}
        -:  450:	
        3:  451:	tabImportant[k] = malloc(sizeof(int));
        3:  452:	tabImportant[k][0] = -2; 
        -:  453:	
        3:  454:	return tabImportant;
        -:  455:}
        -:  456:
        -:  457:/*
        -:  458:*	Retourne les indices des importantes d'une composante connexe
        -:  459:*	-1 s'il n'y en a pas
        -:  460:*
        -:  461:* 	@ param compo, une composante connexe
        -:  462:*	@ param g, la structure de graphe
        -:  463:*	@ return result, le tableau contenant les indices des personnes importantes
        -:  464:*/
        -:  465:int* getImportantPerson(int *compo, struct Graph g)
       11:  466:{
       11:  467:	int i = 0;
       11:  468:	int j = 0;
       11:  469:	int k = 0;
       11:  470:	int m = 0;
        -:  471:	int l, n;
        -:  472:	int *compo2, *compo3, *tag, *tagDual;
       11:  473:	int *result = malloc(sizeof(int));
       11:  474:	result[m] = -1;
        -:  475:
       11:  476:	if (compo[1] == -1)
        -:  477:	{
        5:  478:		result[m] = compo[0];
        5:  479:		result = realloc(result, 2 * sizeof(int));
        5:  480:		result[1] = -1;
        -:  481:	}
        -:  482:	else
        -:  483:	{
       22:  484:		while (compo[i] != -1)
        -:  485:		{
       16:  486:			compo2 = malloc(sizeof(int));
        -:  487:		
       80:  488:			while (compo[j] != -1)
        -:  489:			{
       48:  490:				if (i != j)
        -:  491:				{
       32:  492:					compo2[k] = compo[j];
       32:  493:					k++;				
       32:  494:					compo2 = realloc(compo2, (k + 1) * sizeof(int));
        -:  495:				}
        -:  496:				
       48:  497:				j++;
        -:  498:			}
        -:  499:			 
       16:  500:			j = 0;
       16:  501:			compo2[k] = -1;
        -:  502:			/* On a une sous composante sans l'élément courant */
        -:  503:
       16:  504:			n = compo2[0];
       16:  505:			compo3 = malloc(sizeof(int));
       16:  506:			tag = depthTraversal(g.matrix, n, g.nbPersonnes, 1, compo[i]);
       16:  507:			tagDual = depthTraversal(g.matrix, n, g.nbPersonnes, 0, compo[i]);
       16:  508:			l = 0;
        -:  509:
      132:  510:			for (j = 0; j < g.nbPersonnes; j++)
        -:  511:			{
      116:  512:				if (tag[j] == 1 && tagDual[j] == 1)
        -:  513:				{
       22:  514:					compo3[l] = j;
       22:  515:					l++;
       22:  516:					compo3 = realloc(compo3, (l + 1) * sizeof(int));
        -:  517:				}
        -:  518:			}
        -:  519:		
       16:  520:			compo3[l] = -1;
        -:  521:
       16:  522:			j = 0;
       16:  523:			k = 0;
        -:  524:
       16:  525:			if (componentEqual(compo2, compo3) == 0)
        -:  526:			{
        6:  527:				result[m] = compo[i];
        6:  528:				m++;
        6:  529:				result = realloc(result, (m + 1) * sizeof(int));
        -:  530:			}
        -:  531:			
       16:  532:			i++;
        -:  533:			
       16:  534:			free(compo2);
       16:  535:			free(compo3);
       16:  536:			free(tag);
       16:  537:			free(tagDual);
        -:  538:		}
        -:  539:	
        6:  540:		result[m] = -1;
        -:  541:	}
        -:  542:	
       11:  543:	return result;	
        -:  544:}
        -:  545:
        -:  546:/*
        -:  547:*	Dit si deux composantes connexes sont égales
        -:  548:*
        -:  549:* 	@ param compo1, une composante connexe
        -:  550:*	@ param compo2, une composante connexe
        -:  551:*	@ return result, 1 si elles sont egales, 0 sinon
        -:  552:*/
        -:  553:int componentEqual(int *compo1,int *compo2)		
       16:  554:{
       16:  555:	int result = 1;
       16:  556:	int i = 0;
        -:  557:	
       60:  558:	while (compo1[i] != -1 && result == 1)
        -:  559:	{
       28:  560:		if (compo1[i] != compo2[i])
        -:  561:		{
        6:  562:			result = 0;
        -:  563:		}
        -:  564:		
       28:  565:		i++;
        -:  566:	}
        -:  567:	
       16:  568:	if (compo1[i] == -1 && compo2[i] != -1)
        -:  569:	{
        2:  570:		result = 0;
        -:  571:	}
        -:  572:	
       16:  573:	return result;
        -:  574:}
