        -:    0:Source:../src/source/ExportGraph.c
        -:    0:Graph:../src/source/ExportGraph.gcno
        -:    0:Data:../src/source/ExportGraph.gcda
        -:    0:Runs:6
        -:    0:Programs:1
        -:    1:/*
        -:    2: _____ _                 _         __  __ 
        -:    3:|  ___| | __ _ _ __  ___| |_ __ _ / _|/ _|
        -:    4:| |_  | |/ _` | '_ \/ __| __/ _` | |_| |_ 
        -:    5:|  _| | | (_| | |_) \__ \ || (_| |  _|  _|
        -:    6:|_|   |_|\__,_| .__/|___/\__\__,_|_| |_|  
        -:    7:              |_|                         
        -:    8:Flapstaff is a Light And Powerful Social Text Analyser For Facebook
        -:    9:
        -:   10:Coders:
        -:   11:benjamin.crespo.ballester(at)gmail(dot)com
        -:   12:yann.pravo(at)gmail(dot)com
        -:   13:mathieu.triay(at)gmail(dot)com
        -:   14:
        -:   15:Repo: http://bitbucket.org/nagy/flapstaff/
        -:   16:*/
        -:   17:
        -:   18:#include "../headers/Graphe.h"
        -:   19:#include "../headers/TPersonne.h"
        -:   20:
        -:   21:/*
        -:   22:*	Donne le nombre de CFC d'un tableau de CFC donné
        -:   23:*	
        -:   24:*	@param g, Graphe contenant toutes les infos
        -:   25:*	@param SCC, tableau de composantes fortement connexes
        -:   26:*	@return nombre de composantes trouvé
        -:   27:*/
        -:   28:int nbSCC(struct Graph g, int **SCC)
        3:   29:{
        3:   30:	int i = 0;
        3:   31:	int j = 0;
        -:   32:	
       16:   33:	while (i < g.nbPersonnes && SCC[i][j] != -1)
        -:   34:	{
       10:   35:		i++;
        -:   36:	}
        -:   37:	
        3:   38:	return i;
        -:   39:}
        -:   40:
        -:   41:/*
        -:   42:*	Ecrit les CFC données dans le fichier passé en paramètre.
        -:   43:*	Le curseur du fichier doit être placé au bon endroit !
        -:   44:*
        -:   45:*	@param g, Graphe contenant toutes les infos
        -:   46:*	@param SCC, le tableau de composantes fortement connexes
        -:   47:*	@param fichier, fichier ouvert en écriture où on va écrire les CFC
        -:   48:*	@param importantPersons, SCC normal si 0, SCC avec personnes importante si 1
        -:   49:*/
        -:   50:void exportSCC(struct Graph g, int **SCC, FILE * fichier, int importantPersons)
        4:   51:{
        4:   52:	int i = 0;
        4:   53:	int j = 0;
        -:   54:	int **vip;
        4:   55:	int k = 0;
        -:   56:	
        4:   57:	if (importantPersons == 1)
        -:   58:	{
        2:   59:		vip = getAllImportantPersons(SCC, g);
        -:   60:	}
        -:   61:	
       17:   62:	for (i = 0; i < g.nbPersonnes && SCC[i][j] != -1; ++i)
        -:   63:	{
       36:   64:		for (j = 0; j < g.nbPersonnes && SCC[i][j] != -1; ++j)
        -:   65:		{
       23:   66:			if (SCC[i][j + 1] != -1)
        -:   67:			{
       13:   68:				if (importantPersons && vip[i][k] == SCC[i][j])
        -:   69:				{
        3:   70:					fprintf(fichier, "*%s, ", g.tabPersonnes[SCC[i][j]].id);
        3:   71:					k++;
        -:   72:				}
        -:   73:				else
        -:   74:				{
        7:   75:					fprintf(fichier, "%s, ", g.tabPersonnes[SCC[i][j]].id);
        -:   76:				}
        -:   77:			}
        -:   78:			else
        -:   79:			{
       16:   80:				if (importantPersons && vip[i][k] == SCC[i][j])
        -:   81:				{
        3:   82:					fprintf(fichier, "*%s\n", g.tabPersonnes[SCC[i][j]].id);
        3:   83:					k++;
        -:   84:				}
        -:   85:				else
        -:   86:				{
       10:   87:					fprintf(fichier, "%s\n", g.tabPersonnes[SCC[i][j]].id);
        -:   88:				}
        -:   89:			}
        -:   90:		}
        -:   91:		
       13:   92:		k = 0;
       13:   93:		j = 0;
        -:   94:	}
        -:   95:	
        4:   96:	if (importantPersons == 1)
        -:   97:	{
        2:   98:		i = 0;
        -:   99:		
       11:  100:		while (vip[i][0] != -2)
        -:  101:		{
        7:  102:			free(vip[i]);
        7:  103:			i++;
        -:  104:		}
        -:  105:		
        2:  106:		free(vip);
        -:  107:	}
        -:  108:}
        -:  109:
        -:  110:/*
        -:  111:*	Ecrit les réponses aux questions données en paramètre dans le fichier
        -:  112:*	donné. Le curseur du fichier doit être positionné au bon endroit.
        -:  113:*
        -:  114:*	@param g, graphe contenant les infos
        -:  115:*	@param answers, liste des points du graphe formant le chemin le plus court
        -:  116:*		entre 2 points donnés.
        -:  117:*	@param fichier, fichier ouvert où seront écrites les réponses
        -:  118:*/
        -:  119:void exportQuestionsAnswers(struct Graph g, int **answers, FILE * fichier)
        3:  120:{
        -:  121:	int i, j, freq;
        3:  122:	j = 0;
        3:  123:	freq = 0;
        -:  124:	
        9:  125:	for (i = 0; i < g.nbQuestions && answers[i][j] != -1; i++)
        -:  126:	{		
        6:  127:		if (answers[i][0] != -2)
        -:  128:		{
        6:  129:			for (j = 0; j < g.nbPersonnes && answers[i][j + 1] != -1; j++)
        -:  130:			{
        3:  131:				freq += g.tabPersonnes[answers[i][j]].freq;
        -:  132:			}
        -:  133:
        3:  134:			fprintf(fichier, "%d: ", freq);
        -:  135:
        9:  136:			for (j = j; j >= 0; --j)
        -:  137:			{
        6:  138:				if (j == 0)
        -:  139:				{
        3:  140:					fprintf(fichier, "%s\n", g.tabPersonnes[answers[i][j]].id);
        -:  141:				}
        -:  142:				else
        -:  143:				{
        3:  144:					fprintf(fichier, "%s, ", g.tabPersonnes[answers[i][j]].id);	
        -:  145:				}
        -:  146:			}
        -:  147:
        3:  148:			j = 0;
        3:  149:			freq = 0;
        -:  150:		}
        -:  151:		else
        -:  152:		{
        -:  153:			/* le chemin n'existe pas */
        3:  154:			fprintf(fichier, "Il n'y a pas de chemin entre %s et %s\n", 
        -:  155:				g.questions[i].id1, g.questions[i].id2);
        -:  156:		}	
        -:  157:	}
        -:  158:}
        -:  159:
        -:  160:/*
        -:  161:*	Exporte le graphe donné dans un fichier avec le nom transmis
        -:  162:*	en paramètre. Si il existe déjà, il sera écrasé.
        -:  163:*
        -:  164:*	@param g, graphe contenant les infos à exporter
        -:  165:*	@param fileName, nom du fichier où on écrira
        -:  166:*/
        -:  167:void exportGraph(struct Graph g, char *fileName, int important)
        2:  168:{
        -:  169:	int **answers, **SCCs;
        2:  170:	FILE * fichier = fopen(fileName, "w+");
        -:  171:	int i, nbSCCs;
        -:  172:	
        2:  173:	answers = getQuestionsAnswers(g);
        2:  174:	SCCs = getStronglyConnectedComponents(g.matrix, g.nbPersonnes);
        2:  175:	nbSCCs = nbSCC(g, SCCs);
        -:  176:	
        2:  177:	fprintf(fichier, "%d\n", nbSCCs);
        2:  178:	exportSCC(g, SCCs, fichier, important);
        2:  179:	exportQuestionsAnswers(g, answers, fichier);
        -:  180:	
        -:  181:	/* Le +1 est necessaire car on a une case allouée supplémentaire */
       11:  182:	for(i = 0; i < nbSCCs + 1; ++i)
        -:  183:	{
        9:  184:		free(SCCs[i]);
        -:  185:	}
        -:  186:	
        2:  187:	free(SCCs);
        -:  188:	
        6:  189:	for (i = 0; i < g.nbQuestions && answers[i][0] != -1; i++)
        -:  190:	{
        4:  191:		free(answers[i]);
        -:  192:	}
        -:  193:	
        2:  194:	free(answers);
        -:  195:	
        2:  196:	fclose(fichier);
        -:  197:}